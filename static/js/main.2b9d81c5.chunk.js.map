{"version":3,"sources":["getWeb3.js","SeedCard.js","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","SeedCard","address","account","useState","isLoaded","setIsLoaded","seed","setSeed","token","setToken","tokenName","setTokenName","requiredTokens","setRequiredTokens","isWhitelisted","setIsWhitelisted","isFunded","setIsFunded","balance","setBalance","metadata","setMetadata","useEffect","eth","Contract","Seed","abi","methods","seedToken","call","ERC20","getToken","getTokenName","name","calculateRequiredSeed","seedAmountRequired","forDistribution","feeAmountRequired","forFee","utils","BN","add","toString","checkIfWhiteList","permissionedSeed","checkIfFunded","checkBalance","balanceOf","getMetadata","hashedMetadata","toAscii","fundSeed","transfer","options","send","from","fetchWhitelist","url","axios","get","res","whitelists","data","split","map","replace","parseWhiteList","JSON","parse","seedDetails","whitelist","addWhitelist","alert","whitelistBatch","className","type","onClick","App","state","currentAccount","seeds","getNetworkId","net","getId","networkId","getNetwork","componentDidMount","on","accounts","setState","location","reload","network","Error","seedFactory","SeedFactory","contractAddresses","getAccounts","factory","getDeployedSeedAddress","getPastEvents","fromBlock","toBlock","allEvents","event","returnValues","newSeed","loadDeployedSeeds","loadNewFactory","handleFactoryAddress","newFactoryAddress","target","value","renderDeployedSeeds","this","placeholder","onChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0j+EA8BeA,EA5BC,kBACZ,IAAIC,SAAQ,SAACC,EAASC,GAClBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DACzBF,OAAOG,SADkB,wBAElBC,EAAO,IAAIC,IAAKL,OAAOG,UAFL,kBAIdH,OAAOG,SAASG,SAJF,OAKpBR,EAAQM,GALY,gDAOpBL,EAAO,EAAD,IAPc,gCAUnBC,OAAOI,MACNA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,0BACZV,EAAQM,KAGFK,EAAW,IAAIJ,IAAKK,UAAUC,aAChC,yBAEEP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IArBgB,8D,6DC8HzBQ,EA7HE,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,QAAST,EAAmB,EAAnBA,KAAMU,EAAa,EAAbA,QAE9B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,qBAA1B,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,qBAAlC,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA4CR,mBAAS,KAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAAgCZ,oBAAS,GAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAA8Bd,qBAA9B,mBAAOe,EAAP,KAAgBC,EAAhB,KACA,EAAgChB,qBAAhC,mBAAOiB,EAAP,KAAiBC,EAAjB,KACA,EAAoClB,qBAApC,6BAEAmB,qBAAU,WACN,IAAMhB,EAAO,IAAId,EAAK+B,IAAIC,SAASC,EAAKC,IAAKzB,GAC7CM,EAAQD,GACM,uCAAG,8BAAAhB,EAAA,sEACWgB,EAAKqB,QAAQC,YAAYC,OADpC,OACPD,EADO,OAEPpB,EAAQ,IAAIhB,EAAK+B,IAAIC,SAASM,EAAMJ,IAAKE,GAC/CnB,EAASD,GACTH,GAAY,GAJC,2CAAH,oDAMd0B,KACF,CAAC9B,EAAST,IAEZ,IAAMwC,EAAY,uCAAG,4BAAA1C,EAAA,sEACOkB,EAAMmB,QAAQM,OAAOJ,OAD5B,OACXnB,EADW,OAEjBC,EAAaD,GAFI,2CAAH,qDAKZwB,EAAqB,uCAAG,8BAAA5C,EAAA,sEACIgB,EAAKqB,QAAQQ,qBAAqBN,OADtC,cACpBO,EADoB,gBAEL9B,EAAKqB,QAAQU,oBAAoBR,OAF5B,OAEpBS,EAFoB,OAG1BzB,EAAoB,IAAIrB,EAAK+C,MAAMC,GAAGJ,GAAkBK,IAAI,IAAIjD,EAAK+C,MAAMC,GAAGF,IAAUI,YAH9D,2CAAH,qDAKrBC,EAAgB,uCAAG,4BAAArD,EAAA,sEACOgB,EAAKqB,QAAQiB,mBAAmBf,OADvC,OACff,EADe,OAErBC,EAAiBD,GAFI,2CAAH,qDAIhB+B,EAAa,uCAAG,4BAAAvD,EAAA,sEACKgB,EAAKqB,QAAQX,WAAWa,OAD7B,OACZb,EADY,OAElBC,EAAYD,GAFM,2CAAH,qDAIb8B,GAAY,uCAAG,4BAAAxD,EAAA,sEACKkB,EAAMmB,QAAQoB,UAAU9C,GAAS4B,OADtC,OACXX,EADW,OAEjBC,EAAWD,GAFM,2CAAH,qDAKZ8B,GAAW,uCAAG,8BAAA1D,EAAA,sEACagB,EAAKqB,QAAQP,WAAWS,OADrC,OACVoB,EADU,OAEV7B,EAAW5B,EAAK+C,MAAMW,QAAQD,GACpC5B,EAAYD,GAHI,2CAAH,qDAMX+B,GAAQ,uCAAG,sBAAA7D,EAAA,sEACPkB,EAAMmB,QAAQyB,SAAS9C,EAAK+C,QAAQpD,QAASW,GAAgB0C,KAAK,CACpEC,KAAOrD,IAFE,2CAAH,qDAMRsD,GAAc,uCAAG,WAAOC,GAAP,iBAAAnE,EAAA,sEACDoE,IAAMC,IAAIF,GADT,cACbG,EADa,OAEbC,EAAcD,EAAIE,KAAMC,MAAM,KAFjB,kBAGZF,EAAWG,KAAI,SAAC9D,GACnB,OAAOA,EAAQ+D,QAAQ,MAAO,QAJf,2CAAH,sDAQdC,GAAc,uCAAG,4BAAA5E,EAAA,sEACDoE,IAAMC,IAAN,+BAAkCvC,IADjC,cACbwC,EADa,gBAENJ,GAAeW,KAAKC,MAAMR,EAAIE,MAAMO,YAAYC,WAF1C,mFAAH,qDAKdC,GAAY,uCAAG,4BAAAjF,EAAA,sEACQ4E,KADR,cACXL,EADW,OAEjBW,MAAM,6CAAD,OAA8CX,IAFlC,SAGXvD,EAAKqB,QAAQ8C,eAAeZ,GAAYP,KAAK,CAC/CC,KAAMrD,IAJO,2CAAH,qDAqBlB,OAbAoB,qBACI,WACOlB,IACC4B,IACAE,IACAS,IACAE,IACAC,KACAE,QAEN,CAAC1C,EAAMF,EAAUZ,EAAMS,EAASO,IAIlCJ,EACI,sBAAKsE,UAAW,YAAhB,UACI,yCAAYpE,EAAK+C,QAAQpD,WACzB,sDAC0BO,EAAM6C,QAAQpD,QAAQ,uBADhD,qBAEuBS,EAAU,uBAFjC,0BAG4BE,EAAe,uBAH3C,aAIeM,EAAQ,uBAJvB,cAKgBF,EAAS0B,WAAW,uBALpC,mBAMqB5B,EAAc4B,WAAW,0BAG1C5B,EACI,wBAAQ6D,KAAM,SAAUC,QAASL,GAAjC,2BAEA,KAGFvD,GAAwB,MAAZE,EAGV,KAFA,wBAAQyD,KAAM,SAAUC,QAASzB,GAAjC,0BAOZ,8CCMG0B,E,4MA5HXC,MAAQ,CACV1E,UAAU,EACJ2E,eAAgB,GACtBC,MAAO,I,EAGRC,a,sBAAe,4BAAA3F,EAAA,sEACU,EAAKE,KAAK+B,IAAI2D,IAAIC,QAD5B,cACRC,EADQ,yBAEO,OAAdA,EAAqB,KAAOA,GAFrB,2C,EAKfC,W,sBAAa,sBAAA/F,EAAA,sEACC,EAAK2F,eADN,0BAEN,IAFM,OAGN,IAHM,+CAEI,WAFJ,gCAGI,WAHJ,iCAIM,GAJN,2C,EAQVK,kB,sBAAoB,4BAAAhG,EAAA,+EAEHN,IAFG,cAErB,EAAKQ,KAFgB,OAIrBJ,OAAOG,SAASgG,GAAG,mBAAmB,SAACC,GACtChB,MAAM,sCAAsCgB,EAAS,IACzC,EAAKC,SAAS,CACVV,eAAgBS,EAAS,QAI1CpG,OAAOG,SAASgG,GAAG,gBAAgB,kBAAMnG,OAAOsG,SAASC,YAXpC,SAYC,EAAKN,aAZN,WAaL,KADVO,EAZe,+BAcdC,MAAM,yBAdQ,eAgBrB,EAAKC,YAAc,IAAI,EAAKtG,KAAK+B,IAAIC,SAASuE,EAAYrE,IAAKsE,EAAkBJ,GAASG,aAhBrE,YAoBVH,EApBU,KAqBV,EAAKE,YAAYzC,QAAQpD,QArBf,UAuBI,EAAKT,KAAK+B,IAAI0E,cAvBlB,oBAuBiC,GAvBjC,MAoBnBL,QApBmB,KAqBnBM,QArBmB,KAsBnB9F,UAAU,EACV2E,eAvBmB,WAkBhBU,SAlBgB,kEA6BZ9F,QAAQC,IAAR,MA7BY,0D,EAkCvBuG,uB,sBAAyB,4BAAA7G,EAAA,sEACA,EAAKwG,YAAYM,cAAc,cAAc,CACpEC,UAAW,EACXC,QAAS,WAHc,cAClBC,EADkB,yBAKjBA,EAAUvC,KAChB,SAAAwC,GAAK,OAAIA,EAAMC,aAAaC,YANL,2C,EAWzBC,kB,sBAAoB,4BAAArH,EAAA,sEACC,EAAK6G,yBADN,OACbnB,EADa,OAEnB,EAAKS,SAAS,CACbT,MAAOA,IAHW,2C,EAOpB4B,e,uCAAiB,WAAO3G,GAAP,SAAAX,EAAA,sDAChBK,QAAQC,IAAIK,GACZ,EAAK6F,YAAc,IAAI,EAAKtG,KAAK+B,IAAIC,SAASuE,EAAYrE,IAAKzB,GAC/D,EAAKwF,SACJ,CACCS,QAAS,EAAKJ,YAAYzC,QAAQpD,UALpB,2C,wDAUjB4G,qB,uCAAuB,WAAOL,GAAP,SAAAlH,EAAA,sDACtB,EAAKmG,SACJ,CACCqB,kBAAmBN,EAAMO,OAAOC,QAHZ,2C,wDAQvBC,oBAAsB,SAACjC,GACtB,OAAOA,EAAMhB,KACZ,SAAA1D,GAAI,OAAI,cAAC,EAAD,CAAqBL,QAASK,EAAMd,KAAM,EAAKA,KAAMU,QAAS,EAAK4E,MAAMC,gBAA1DzE,O,4CAItB,WAAU,IAAD,OACL,OACI4G,KAAKpC,MAAM1E,SACpB,sBAAKsE,UAAU,MAAf,UACC,iDACiBwC,KAAKpC,MAAMc,QAAQ,uBADpC,uBAEsBsB,KAAKpC,MAAMoB,WAEjC,gCACC,uBAAOiB,YAAa,yBAA0BH,MAAOE,KAAKpC,MAAMgC,kBAAmBM,SAAUF,KAAKL,uBAClG,wBAAQlC,KAAM,SAAUC,QAAS,kBAAI,EAAKgC,eAAe,EAAK9B,MAAMgC,oBAApE,8BAECI,KAAKpC,MAAMoB,UAAYF,EAAkBkB,KAAKpC,MAAMc,SAASG,YAC5D,wBAAQpB,KAAM,SAAUC,QAAS,kBAAI,EAAKgC,eAAeZ,EAAkB,EAAKlB,MAAMc,SAASG,cAA/F,iCAEA,QAGH,gCACC,wBAAQpB,KAAM,SAAUC,QAASsC,KAAKP,kBAAtC,wBACCO,KAAKD,oBAAoBC,KAAKpC,MAAME,aAIvC,8C,GAxHeqC,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2b9d81c5.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst getWeb3 = () => \r\n    new Promise((resolve, reject)=> {\r\n        window.addEventListener('load', async () => {\r\n            if(window.ethereum){\r\n                const web3 = new Web3(window.ethereum);\r\n                try{\r\n                    await window.ethereum.enable();\r\n                    resolve(web3);\r\n                }catch (error) {\r\n                    reject(error)\r\n                }\r\n            }\r\n            else if (window.web3){\r\n                const web3 = window.web3;\r\n                console.log(\"Injected web3 detected\");\r\n                resolve(web3);\r\n            }\r\n            else {\r\n                const provider = new Web3.providers.HttpProvider(\r\n                    \"http://127.0.0.1:8545\"\r\n                );\r\n                const web3 = new Web3(provider);\r\n                console.log(\"No web3 instance injected, using local web3.\");\r\n                resolve(web3);\r\n            }\r\n        });\r\n    });\r\n\r\nexport default getWeb3;","import Seed from './contracts/Seed.json';\r\nimport ERC20 from './contracts/ERC20.json';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SeedCard = ({address, web3, account}) => {\r\n\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [seed, setSeed] = useState();\r\n    const [token, setToken] = useState();\r\n    const [tokenName, setTokenName] = useState();\r\n    const [requiredTokens, setRequiredTokens] = useState('0');\r\n    const [isWhitelisted, setIsWhitelisted] = useState(false);\r\n    const [isFunded, setIsFunded] = useState(false);\r\n    const [balance, setBalance] = useState();\r\n    const [metadata, setMetadata] = useState();\r\n    const [whitelists, setWhitelists] = useState();\r\n\r\n    useEffect(() => {\r\n        const seed = new web3.eth.Contract(Seed.abi, address);\r\n        setSeed(seed);\r\n        const getToken = async () => {\r\n            const seedToken = await seed.methods.seedToken().call();\r\n            const token = new web3.eth.Contract(ERC20.abi, seedToken);\r\n            setToken(token);\r\n            setIsLoaded(true);\r\n        };\r\n        getToken();\r\n    },[address, web3]);\r\n\r\n    const getTokenName = async () => {\r\n        const tokenName = await token.methods.name().call();\r\n        setTokenName(tokenName);\r\n    }\r\n\r\n    const calculateRequiredSeed = async () => {\r\n        const forDistribution = await seed.methods.seedAmountRequired().call();\r\n        const forFee = await seed.methods.feeAmountRequired().call();\r\n        setRequiredTokens(((new web3.utils.BN(forDistribution)).add(new web3.utils.BN(forFee))).toString());\r\n    }\r\n    const checkIfWhiteList = async () => {\r\n        const isWhitelisted = await seed.methods.permissionedSeed().call();\r\n        setIsWhitelisted(isWhitelisted);\r\n    }\r\n    const checkIfFunded = async () => {\r\n        const isFunded = await seed.methods.isFunded().call();\r\n        setIsFunded(isFunded);\r\n    }\r\n    const checkBalance = async () => {\r\n        const balance = await token.methods.balanceOf(address).call();\r\n        setBalance(balance);\r\n    }\r\n\r\n    const getMetadata = async () => {\r\n        const hashedMetadata = await seed.methods.metadata().call();\r\n        const metadata = web3.utils.toAscii(hashedMetadata);\r\n        setMetadata(metadata);\r\n    }\r\n\r\n    const fundSeed = async () => {\r\n        await token.methods.transfer(seed.options.address, requiredTokens).send({\r\n            from : account\r\n        });\r\n    }\r\n\r\n    const fetchWhitelist = async (url) => {\r\n        const res = await axios.get(url);\r\n        const whitelists = (res.data).split(\",\");\r\n        return whitelists.map((account) => {\r\n            return account.replace(/\\n/g, \"\");\r\n        });\r\n    };\r\n\r\n    const parseWhiteList = async () => {\r\n        const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n        return await fetchWhitelist(JSON.parse(res.data).seedDetails.whitelist);\r\n    }\r\n\r\n    const addWhitelist = async () => {\r\n        const whitelists = await parseWhiteList();\r\n        alert(`This address will be added as whitelist:- ${whitelists}`);\r\n        await seed.methods.whitelistBatch(whitelists).send({\r\n            from: account\r\n        });\r\n    }\r\n\r\n    useEffect(\r\n        () => {\r\n            if(isLoaded){\r\n                getTokenName();\r\n                calculateRequiredSeed();\r\n                checkIfWhiteList();\r\n                checkIfFunded();\r\n                checkBalance();\r\n                getMetadata();\r\n            }\r\n        },[seed, isLoaded, web3, address, token]\r\n    )\r\n\r\n    return (\r\n        isLoaded?(\r\n            <div className={\"seed-card\"}>\r\n                <h4>Seed:- {seed.options.address}</h4>\r\n                <p>\r\n                    Seed Token Address:- {token.options.address}<br/>\r\n                    Seed Token Name:- {tokenName}<br />\r\n                    Required Seed Tokens:- {requiredTokens}<br/>\r\n                    Balance:- {balance}<br/>\r\n                    isFunded:- {isFunded.toString()}<br/>\r\n                    isWhitelisted:- {isWhitelisted.toString()}<br/>\r\n                </p>\r\n                {\r\n                    isWhitelisted?\r\n                        <button type={'button'} onClick={addWhitelist}>Add Whitelist</button>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    (!isFunded && balance === '0')?\r\n                        <button type={'button'} onClick={fundSeed}>Fund Seed</button>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n            )\r\n            :\r\n            <div>Loading...</div>\r\n    )\r\n}\r\n\r\nexport default SeedCard;","import { Component } from \"react\";\nimport contractAddresses from \"./contractAddresses.json\";\nimport SeedFactory from \"./contracts/SeedFactory.json\";\nimport getWeb3 from './getWeb3';\nimport \"./App.css\";\nimport SeedCard from \"./SeedCard\";\n\nclass App extends Component {\n    state = {\n\t\tisLoaded: false,\n        currentAccount: \"\",\n\t\tseeds: []\n    };\n\n\tgetNetworkId = async () => {\n\t\tconst networkId = await this.web3.eth.net.getId();\n\t\treturn networkId === 5777 ? 1337 : networkId;\n\t}\n\n\tgetNetwork = async () => {\n\t\tswitch(await this.getNetworkId()){\n\t\t\tcase 1: return 'mainnet';\n\t\t\tcase 4: return 'rinkeby';\n\t\t\tdefault: return -1;\n\t\t}\n\t}\n\n    componentDidMount = async () => {\n        try {\n\t\t\tthis.web3 = await getWeb3();\n\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\n\t\t\t\talert(\"Account changed. Current Account:- \"+accounts[0]);\n                this.setState({\n                    currentAccount: accounts[0],\n                });\n            });\n\n\t\t\twindow.ethereum.on(\"chainChanged\", () => window.location.reload());\n\t\t\tconst network = await this.getNetwork();\n\t\t\tif(network === -1){\n\t\t\t\tthrow Error(\"network not supported\");\n\t\t\t}\n\t\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, contractAddresses[network].SeedFactory);\n\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnetwork: network,\n\t\t\t\t\tfactory: this.seedFactory.options.address,\n\t\t\t\t\tisLoaded: true,\n\t\t\t\t\tcurrentAccount: (await this.web3.eth.getAccounts())[0]\n\t\t\t\t}\n\t\t\t)\n\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n\t// Get all the past 'SeedCreated' events, filter the seed address and return array of seedAddress\n\tgetDeployedSeedAddress = async () => {\n\t\tconst allEvents = await this.seedFactory.getPastEvents('SeedCreated',{\n\t\t\tfromBlock: 0,\n\t\t\ttoBlock: 'latest'\n\t\t});\n\t\treturn allEvents.map(\n\t\t\tevent => event.returnValues.newSeed\n\t\t);\n\t}\n\n\t// update set with array of seed address. This will update the render\n\tloadDeployedSeeds = async () => {\n\t\tconst seeds = await this.getDeployedSeedAddress();\n\t\tthis.setState({\n\t\t\tseeds: seeds\n\t\t});\n\t}\n\n\tloadNewFactory = async (address) => {\n\t\tconsole.log(address);\n\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, address);\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tfactory: this.seedFactory.options.address\n\t\t\t}\n\t\t);\n\t}\n\n\thandleFactoryAddress = async (event) => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tnewFactoryAddress: event.target.value\n\t\t\t}\n\t\t);\n\t}\n\n\trenderDeployedSeeds = (seeds) => {\n\t\treturn seeds.map(\n\t\t\tseed => <SeedCard key={seed} address={seed} web3={this.web3} account={this.state.currentAccount} />\n\t\t)\n\t}\n\n    render() {\n        return (\n            this.state.isLoaded?\n\t\t\t<div className=\"App\">\n\t\t\t\t<h5>\n\t\t\t\t\tNetwork used:- {this.state.network}<br/>\n\t\t\t\t\tSeed Factory Used:- {this.state.factory}\n\t\t\t\t</h5>\n\t\t\t\t<div>\n\t\t\t\t\t<input placeholder={\"change factory address\"} value={this.state.newFactoryAddress} onChange={this.handleFactoryAddress} />\n\t\t\t\t\t<button type={\"button\"} onClick={()=>this.loadNewFactory(this.state.newFactoryAddress)}>Load New Factory</button>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.factory !== contractAddresses[this.state.network].SeedFactory?\n\t\t\t\t\t\t\t<button type={\"button\"} onClick={()=>this.loadNewFactory(contractAddresses[this.state.network].SeedFactory)}>Use Default Factory</button>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button type={\"button\"} onClick={this.loadDeployedSeeds}>Load Seeds</button>\n\t\t\t\t\t{this.renderDeployedSeeds(this.state.seeds)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t:\n\t\t\t<div>Loading</div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}