{"version":3,"sources":["getWeb3.js","SeedCard.js","assets/img/PrimeLAUNCH.svg","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","SeedCard","address","network","account","gasPriceUrl","useState","isLoaded","setIsLoaded","seed","setSeed","token","setToken","tokenName","setTokenName","fundingToken","setFundingToken","fundingTokenName","setFundingTokenName","requiredTokens","setRequiredTokens","isWhitelisted","setIsWhitelisted","isFunded","setIsFunded","balance","setBalance","metadata","setMetadata","admin","setAdmin","name","setName","isPaused","setIsPaused","isClosed","setIsClosed","useEffect","eth","Contract","Seed","abi","getToken","methods","seedToken","call","ERC20","getFundingToken","undefined","getTokenName","getFundingTokenName","calculateRequiredSeed","seedAmountRequired","forDistribution","feeAmountRequired","forFee","utils","BN","add","toString","checkIfWhiteList","permissionedSeed","checkIfFunded","checkBalance","balanceOf","getMetadata","hashedMetadata","toAscii","getAdmin","fundSeed","transfer","options","estimateGas","from","gas","getGasPrice","gasPrice","cost","mul","alert","fromWei","send","message","fetchWhitelist","url","axios","get","res","whitelists","data","split","map","replace","parseWhiteList","JSON","parse","seedDetails","whitelist","parseName","general","projectName","average","unparsedGasPrice","toWei","addWhitelist","whitelistBatch","getSeedStatus","paused","closed","pause","unpause","close","Card","bg","style","maxWidth","marginBottom","marginRight","marginLeft","paddingLeft","paddingRight","Body","bsPrefix","className","Title","Subtitle","target","rel","href","Text","Button","type","onClick","process","App","state","currentAccount","seeds","show","getNetworkId","net","getId","networkId","getNetwork","componentDidMount","on","accounts","setState","location","reload","Error","seedFactory","SeedFactory","contractAddresses","getAccounts","factory","handleClose","handleShow","handleUpdate","getDeployedSeedAddress","getPastEvents","fromBlock","toBlock","allEvents","event","returnValues","newSeed","loadDeployedSeeds","loadNewFactory","handleFactoryAddress","newFactoryAddress","value","renderDeployedSeeds","this","Navbar","variant","Container","Brand","src","PrimeLAUNCH","alt","Toggle","Collapse","class","body","Component","UpdateSeedFactory","newSeedFactory","setSeedFactory","Modal","contentClassName","onHide","Header","closeVariant","closeButton","Form","Group","controlId","Label","Control","onChange","placeholder","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c374cf4f.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst getWeb3 = () => \r\n    new Promise((resolve, reject)=> {\r\n        window.addEventListener('load', async () => {\r\n            if(window.ethereum){\r\n                const web3 = new Web3(window.ethereum);\r\n                try{\r\n                    await window.ethereum.enable();\r\n                    resolve(web3);\r\n                }catch (error) {\r\n                    reject(error)\r\n                }\r\n            }\r\n            else if (window.web3){\r\n                const web3 = window.web3;\r\n                console.log(\"Injected web3 detected\");\r\n                resolve(web3);\r\n            }\r\n            else {\r\n                const provider = new Web3.providers.HttpProvider(\r\n                    \"http://127.0.0.1:8545\"\r\n                );\r\n                const web3 = new Web3(provider);\r\n                console.log(\"No web3 instance injected, using local web3.\");\r\n                resolve(web3);\r\n            }\r\n        });\r\n    });\r\n\r\nexport default getWeb3;","import Seed from './contracts/Seed.json';\r\nimport ERC20 from './contracts/ERC20.json';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\nconst SeedCard = ({address, web3, network, account, gasPriceUrl}) => {\r\n\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [seed, setSeed] = useState();\r\n    const [token, setToken] = useState();\r\n    const [tokenName, setTokenName] = useState();\r\n    const [fundingToken, setFundingToken] = useState();\r\n    const [fundingTokenName, setFundingTokenName] = useState();\r\n    const [requiredTokens, setRequiredTokens] = useState('0');\r\n    const [isWhitelisted, setIsWhitelisted] = useState(false);\r\n    const [isFunded, setIsFunded] = useState(false);\r\n    const [balance, setBalance] = useState();\r\n    const [metadata, setMetadata] = useState();\r\n    const [admin, setAdmin] = useState();\r\n    const [name, setName] = useState();\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const [isClosed, setIsClosed] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const seed = new web3.eth.Contract(Seed.abi, address);\r\n        const getToken = async () => {\r\n            const seedToken = await seed.methods.seedToken().call();\r\n            const token = new web3.eth.Contract(ERC20.abi, seedToken);\r\n            setToken(token);\r\n        };\r\n        const getFundingToken = async () => {\r\n            const fundingToken = await seed.methods.fundingToken().call();\r\n            const token = new web3.eth.Contract(ERC20.abi, fundingToken);\r\n            setFundingToken(token);\r\n        }\r\n        setSeed(seed);\r\n        getToken();\r\n        getFundingToken();\r\n    },[address, web3]);\r\n\r\n    useEffect(\r\n        () => {\r\n            if(\r\n                token != undefined && fundingToken != undefined\r\n            ) {\r\n                setIsLoaded(true);\r\n            }\r\n        }, [token, fundingToken]\r\n    )\r\n\r\n    const getTokenName = async () => {\r\n        const tokenName = await token.methods.name().call();\r\n        setTokenName(tokenName);\r\n    }\r\n\r\n    const getFundingTokenName = async () => {\r\n        const fundingTokenName = await fundingToken.methods.name().call();\r\n        setFundingTokenName(fundingTokenName);\r\n    }\r\n\r\n    const calculateRequiredSeed = async () => {\r\n        const forDistribution = await seed.methods.seedAmountRequired().call();\r\n        const forFee = await seed.methods.feeAmountRequired().call();\r\n        setRequiredTokens(((new web3.utils.BN(forDistribution)).add(new web3.utils.BN(forFee))).toString());\r\n    }\r\n    const checkIfWhiteList = async () => {\r\n        const isWhitelisted = await seed.methods.permissionedSeed().call();\r\n        setIsWhitelisted(isWhitelisted);\r\n    }\r\n    const checkIfFunded = async () => {\r\n        const isFunded = await seed.methods.isFunded().call();\r\n        setIsFunded(isFunded);\r\n    }\r\n    const checkBalance = async () => {\r\n        const balance = await token.methods.balanceOf(address).call();\r\n        setBalance(balance);\r\n    }\r\n\r\n    const getMetadata = async () => {\r\n        const hashedMetadata = await seed.methods.metadata().call();\r\n        const metadata = web3.utils.toAscii(hashedMetadata);\r\n        setMetadata(metadata);\r\n    }\r\n\r\n    const getAdmin = async () => {\r\n        setAdmin(await seed.methods.admin().call());\r\n    }\r\n\r\n    const fundSeed = async () => {\r\n        try{\r\n            const gas = await token.methods.transfer(seed.options.address, requiredTokens).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await token.methods.transfer(seed.options.address, requiredTokens).send({\r\n                from : account,\r\n                gas,\r\n                gasPrice\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    const fetchWhitelist = async (url) => {\r\n        const res = await axios.get(url);\r\n        const whitelists = (res.data).split(\",\");\r\n        return whitelists.map((account) => {\r\n            return account.replace(/\\n/g, \"\");\r\n        });\r\n    };\r\n\r\n    const parseWhiteList = async () => {\r\n        const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n        return await fetchWhitelist(JSON.parse(res.data).seedDetails.whitelist);\r\n    }\r\n    const parseName = async () => {\r\n        const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n        return JSON.parse(res.data).general.projectName;\r\n    }\r\n\r\n    const getGasPrice = async () => {\r\n        const unparsedGasPrice = (await axios.get(gasPriceUrl)).data.average/10\r\n        return web3.utils.toWei(\r\n            unparsedGasPrice.toString(),\r\n            'gwei'\r\n            );\r\n    }\r\n\r\n    const addWhitelist = async () => {\r\n        const whitelists = await parseWhiteList();\r\n        alert(`This address will be added as whitelist:- ${whitelists}`);\r\n        try{\r\n            const gas = await seed.methods.whitelistBatch(whitelists).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await seed.methods.whitelistBatch(whitelists).send({\r\n                from: account,\r\n                gas,\r\n                gasPrice \r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    const getSeedStatus = async () => {\r\n        setIsPaused(await seed.methods.paused().call());\r\n        setIsClosed(await seed.methods.closed().call());\r\n    }\r\n\r\n    const pause  = async () => {\r\n        if(!isPaused){\r\n            try{\r\n                const gas = await seed.methods.pause().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.pause().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Paused\");\r\n    }\r\n\r\n    const unpause = async () => {\r\n        if(isPaused){\r\n            try{\r\n                const gas = await seed.methods.unpause().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.unpause().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            }catch (error){\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Unpaused\");\r\n    }\r\n\r\n    const close = async () => {\r\n        if(!isClosed){\r\n            try{\r\n                const gas = await seed.methods.close().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.close().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Closed\");\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if(isLoaded){\r\n                getTokenName();\r\n                getFundingTokenName();\r\n                getAdmin();\r\n                calculateRequiredSeed();\r\n                checkIfWhiteList();\r\n                checkIfFunded();\r\n                checkBalance();\r\n                getSeedStatus();\r\n                getMetadata();\r\n            }\r\n        },[isLoaded]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if(metadata){\r\n                (async () => {\r\n                    setName(await parseName());\r\n                })();\r\n            }\r\n        }, [metadata]\r\n    );\r\n\r\n    return (\r\n        isLoaded?(\r\n            <Card \r\n                bg={\"prime-seed-card\"} \r\n                style={{\r\n                    maxWidth: \"816px\", \r\n                    marginBottom: \"20px\", \r\n                    marginRight: \"auto\", \r\n                    marginLeft: \"auto\",\r\n                    paddingLeft: \"20px\",\r\n                    paddingRight: \"20px\"\r\n                    }}>\r\n              <Card.Body bsPrefix={\"card-body tl\"}>\r\n                <div className={\"seed-details-wrapper\"}>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">\r\n                        Seed Address: <a \r\n                                        target=\"_blank\" \r\n                                        rel=\"noopener noreferrer\" \r\n                                        href={`https://${network===\"mainnet\"?\"\":\"rinkeby.\"}etherscan.io/address/${seed.options.address}`}\r\n                                        >{seed.options.address}</a>\r\n                    </Card.Subtitle>\r\n                    <Card.Text>\r\n                        Admin:- {admin}<br />\r\n                        Seed Token Address:- {token.options.address}<br/>\r\n                        Seed Token Name:- {tokenName}<br />\r\n                        Funding Token Address:- {fundingToken.options.address}<br/>\r\n                        Funding Token Name:- {fundingTokenName}<br />\r\n                        Required Seed Tokens:- {requiredTokens}<br/>\r\n                        Balance:- {balance}<br/>\r\n                        isFunded:- {isFunded.toString()}<br/>\r\n                        isWhitelisted:- {isWhitelisted.toString()}<br/>\r\n                        isClosed:- {isClosed.toString()}<br/>\r\n                        isPaused:- {isPaused.toString()}<br/>\r\n                    </Card.Text>\r\n                </div>\r\n                <div className={\"seed-action-wrapper\"}>\r\n                    <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={getSeedStatus}>Refresh Seed Status</Button>\r\n                    {\r\n                        isClosed?\r\n                            null\r\n                            :\r\n                            (<>\r\n                                <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={close}>Close</Button>\r\n                                {\r\n                                    isPaused?\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={unpause}>Unpause</Button>\r\n                                        :\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={pause}>Pause</Button>\r\n                                }\r\n                                {\r\n                                    isWhitelisted?\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={addWhitelist}>Add Whitelist</Button>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                    (!isFunded && balance === '0')?\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={fundSeed}>Fund</Button>\r\n                                        :\r\n                                        null\r\n                                }\r\n                            </>)\r\n                        }\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n            // <div className={\"seed-card\"}>\r\n            //     <h4>Project Name:- </h4>\r\n            //     <p>\r\n            //         Seed:- {seed.options.address}<br />\r\n            //         Admin:- {admin}<br />\r\n            //         Seed Token Address:- {token.options.address}<br/>\r\n            //         Seed Token Name:- {tokenName}<br />\r\n            //         Funding Token Address:- {fundingToken.options.address}<br/>\r\n            //         Funding Token Name:- {fundingTokenName}<br />\r\n            //         Required Seed Tokens:- {requiredTokens}<br/>\r\n            //         Balance:- {balance}<br/>\r\n            //         isFunded:- {isFunded.toString()}<br/>\r\n            //         isWhitelisted:- {isWhitelisted.toString()}<br/>\r\n            //         isClosed:- {isClosed.toString()}<br/>\r\n            //         isPaused:- {isPaused.toString()}<br/>\r\n            //     </p>\r\n            //     <button type={'button'} onClick={getSeedStatus}>Refresh Seed Status</button>\r\n            //     {\r\n            //         isClosed?\r\n            //             null\r\n            //             :\r\n            //             (<>\r\n            //                 <button type={'button'} onClick={close}>Close Seed</button>\r\n            //                 {\r\n            //                     isPaused?\r\n            //                         <button type={'button'} onClick={unpause}>Unpause Seed</button>\r\n            //                         :\r\n            //                         <button type={'button'} onClick={pause}>Pause Seed</button>\r\n            //                 }\r\n            //                 {\r\n            //                     isWhitelisted?\r\n            //                         <button type={'button'} onClick={addWhitelist}>Add Whitelist</button>\r\n            //                         :\r\n            //                         null\r\n            //                 }\r\n            //                 {\r\n            //                     (!isFunded && balance === '0')?\r\n            //                         <button type={'button'} onClick={fundSeed}>Fund Seed</button>\r\n            //                         :\r\n            //                         null\r\n            //                 }\r\n            //             </>)\r\n            //         }\r\n            // </div>\r\n            )\r\n            :\r\n            <div>Loading...</div>\r\n    )\r\n}\r\n\r\nexport default SeedCard;","export default __webpack_public_path__ + \"static/media/PrimeLAUNCH.1792e25e.svg\";","import { Component, useState } from \"react\";\r\nimport contractAddresses from \"./contractAddresses.json\";\r\nimport SeedFactory from \"./contracts/SeedFactory.json\";\r\nimport getWeb3 from './getWeb3';\r\nimport \"./App.css\";\r\nimport SeedCard from \"./SeedCard\";\r\nimport { Card, Container, Navbar, Button, Modal, Form } from \"react-bootstrap\";\r\nimport PrimeLAUNCH from './assets/img/PrimeLAUNCH.svg';\r\n\r\nconst gasPriceUrl = `https://ethgasstation.info/api/ethgasAPI.json?api-key=${process.env.REACT_APP_GAS_STATION_KEY}`;\r\n\r\nclass App extends Component {\r\n    state = {\r\n\t\tisLoaded: false,\r\n        currentAccount: \"\",\r\n\t\tseeds: [],\r\n\t\tshow: false\r\n    };\r\n\r\n\tgetNetworkId = async () => {\r\n\t\tconst networkId = await this.web3.eth.net.getId();\r\n\t\treturn networkId === 5777 ? 1337 : networkId;\r\n\t}\r\n\r\n\tgetNetwork = async () => {\r\n\t\tswitch(await this.getNetworkId()){\r\n\t\t\tcase 1: return 'mainnet';\r\n\t\t\tcase 4: return 'rinkeby';\r\n\t\t\tdefault: return -1;\r\n\t\t}\r\n\t}\r\n\r\n    componentDidMount = async () => {\r\n        try {\r\n\t\t\tthis.web3 = await getWeb3();\r\n\r\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\r\n\t\t\t\talert(\"Account changed. Current Account:- \"+accounts[0]);\r\n                this.setState({\r\n                    currentAccount: accounts[0],\r\n                });\r\n            });\r\n\r\n\t\t\twindow.ethereum.on(\"chainChanged\", () => window.location.reload());\r\n\t\t\tconst network = await this.getNetwork();\r\n\t\t\tif(network === -1){\r\n\t\t\t\tthrow Error(\"network not supported\");\r\n\t\t\t}\r\n\t\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, contractAddresses[network].SeedFactory);\r\n\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\tnetwork: network,\r\n\t\t\t\t\tfactory: this.seedFactory.options.address,\r\n\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\tcurrentAccount: (await this.web3.eth.getAccounts())[0]\r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\thandleClose = () => {\r\n\t\tthis.setState({show: false});\r\n\t}\r\n\r\n\thandleShow = () => {\r\n\t\tthis.setState({show: true});\r\n\t}\r\n\r\n\thandleUpdate = (address) => {\r\n\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, address);\r\n\t\tthis.setState({\r\n\t\t\tfactory: address,\r\n\t\t\tshow: false\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all the past 'SeedCreated' events, filter the seed address and return array of seedAddress\r\n\tgetDeployedSeedAddress = async () => {\r\n\t\tconst allEvents = await this.seedFactory.getPastEvents('SeedCreated',{\r\n\t\t\tfromBlock: 0,\r\n\t\t\ttoBlock: 'latest'\r\n\t\t});\r\n\t\treturn allEvents.map(\r\n\t\t\tevent => event.returnValues.newSeed\r\n\t\t);\r\n\t}\r\n\r\n\t// update set with array of seed address. This will update the render\r\n\tloadDeployedSeeds = async () => {\r\n\t\tconst seeds = await this.getDeployedSeedAddress();\r\n\t\tthis.setState({\r\n\t\t\tseeds: seeds\r\n\t\t});\r\n\t}\r\n\r\n\tloadNewFactory = async (address) => {\r\n\t\tconsole.log(address);\r\n\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, address);\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tfactory: this.seedFactory.options.address\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\thandleFactoryAddress = async (event) => {\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tnewFactoryAddress: event.target.value\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\trenderDeployedSeeds = (seeds) => {\r\n\t\treturn seeds.map(\r\n\t\t\tseed => <SeedCard key={seed} network={this.state.network} address={seed} web3={this.web3} account={this.state.currentAccount} gasPriceUrl={gasPriceUrl} />\r\n\t\t)\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            this.state.isLoaded?\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Navbar bg={\"prime-header\"} variant={\"dark\"}>\r\n\t\t\t\t  <Container>\r\n\t\t\t\t    <Navbar.Brand href=\"#home\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={PrimeLAUNCH}\r\n\t\t\t\t\t\t\talt={\"PrimeLaunch Logo\"}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Navbar.Brand>\r\n\t\t\t\t    <Navbar.Toggle />\r\n\t\t\t\t    <Navbar.Collapse className=\"justify-content-end\">\r\n\t\t\t\t\t\t\t<span class={\"mr-2\"}>{this.state.network}</span>\r\n\t\t\t\t\t\t\t<Card bg={\"prime-header-factory-card\"} body>\r\n\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\tSeed Factory Used:- {this.state.factory}\r\n\t\t\t\t\t\t\t\t\t<Button type={\"button\"} onClick={this.handleShow} variant=\"link\">Edit</Button>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t    </Navbar.Collapse>\r\n\t\t\t\t  </Container>\r\n\t\t\t\t  <UpdateSeedFactory show={this.state.show} handleUpdate={this.handleUpdate} handleClose={this.handleClose} seedFactory={this.state.factory} />\r\n\t\t\t\t</Navbar>\r\n\t\t\t\t<div className={\"load-btn-container\"}>\r\n\t\t\t\t\t<Button bsPrefix={\"prime-btn btn\"} type={\"button\"} onClick={this.loadDeployedSeeds} >Load Seeds</Button>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.factory !== contractAddresses[this.state.network].SeedFactory?\r\n\t\t\t\t\t\t\t<Button bsPrefix={\"prime-btn btn\"} type={\"button\"}  onClick={()=>this.loadNewFactory(contractAddresses[this.state.network].SeedFactory)}>Use Default Factory</Button>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"seed-card-wrapper\"}>\r\n\t\t\t\t\t{this.renderDeployedSeeds(this.state.seeds)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t:\r\n\t\t\t<div>Loading</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst UpdateSeedFactory = ({seedFactory, show, handleClose, handleUpdate}) => {\r\n\tconst [newSeedFactory, setSeedFactory] = useState(seedFactory);\r\n\treturn (\r\n\t\t<Modal contentClassName={\"bg-prime-header\"} show={show} onHide={handleClose}>\r\n        <Modal.Header closeVariant={\"white\"} closeButton>\r\n          <Modal.Title>Load new Seed Factory</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n\t\t<Form>\r\n  \t\t\t<Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n  \t\t\t  <Form.Label>Seed Factory address</Form.Label>\r\n  \t\t\t  <Form.Control \r\n\t\t\t\tonChange={(event)=>setSeedFactory(event.target.value)} \r\n\t\t\t\ttype=\"text\" \r\n\t\t\t\tplaceholder=\"Enter new seed factory address\" \r\n\t\t\t\t/>\r\n  \t\t\t  <Form.Text className=\"text-muted\">\r\n  \t\t\t    We'll load seed from this seed factory.\r\n  \t\t\t  </Form.Text>\r\n  \t\t\t</Form.Group>\r\n\t\t</Form>\r\n\t\t</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={()=>handleUpdate(newSeedFactory)}>\r\n            Update\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}