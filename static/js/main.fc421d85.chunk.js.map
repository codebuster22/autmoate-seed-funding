{"version":3,"sources":["getWeb3.js","SeedCard.js","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","SeedCard","address","account","gasPriceUrl","useState","isLoaded","setIsLoaded","seed","setSeed","token","setToken","tokenName","setTokenName","requiredTokens","setRequiredTokens","isWhitelisted","setIsWhitelisted","isFunded","setIsFunded","balance","setBalance","metadata","setMetadata","admin","setAdmin","name","setName","isPaused","setIsPaused","isClosed","setIsClosed","useEffect","eth","Contract","Seed","abi","getToken","methods","seedToken","call","ERC20","getTokenName","calculateRequiredSeed","seedAmountRequired","forDistribution","feeAmountRequired","forFee","utils","BN","add","toString","checkIfWhiteList","permissionedSeed","checkIfFunded","checkBalance","balanceOf","getMetadata","hashedMetadata","toAscii","getAdmin","fundSeed","transfer","options","estimateGas","from","gas","getGasPrice","gasPrice","cost","mul","alert","fromWei","send","message","fetchWhitelist","url","axios","get","res","whitelists","data","split","map","replace","parseWhiteList","JSON","parse","seedDetails","whitelist","parseName","general","projectName","average","unparsedGasPrice","toWei","addWhitelist","whitelistBatch","getSeedStatus","paused","closed","pause","unpause","close","className","type","onClick","process","App","state","currentAccount","seeds","getNetworkId","net","getId","networkId","getNetwork","componentDidMount","on","accounts","setState","location","reload","network","Error","seedFactory","SeedFactory","contractAddresses","getAccounts","factory","getDeployedSeedAddress","getPastEvents","fromBlock","toBlock","allEvents","event","returnValues","newSeed","loadDeployedSeeds","loadNewFactory","handleFactoryAddress","newFactoryAddress","target","value","renderDeployedSeeds","this","placeholder","onChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc421d85.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst getWeb3 = () => \r\n    new Promise((resolve, reject)=> {\r\n        window.addEventListener('load', async () => {\r\n            if(window.ethereum){\r\n                const web3 = new Web3(window.ethereum);\r\n                try{\r\n                    await window.ethereum.enable();\r\n                    resolve(web3);\r\n                }catch (error) {\r\n                    reject(error)\r\n                }\r\n            }\r\n            else if (window.web3){\r\n                const web3 = window.web3;\r\n                console.log(\"Injected web3 detected\");\r\n                resolve(web3);\r\n            }\r\n            else {\r\n                const provider = new Web3.providers.HttpProvider(\r\n                    \"http://127.0.0.1:8545\"\r\n                );\r\n                const web3 = new Web3(provider);\r\n                console.log(\"No web3 instance injected, using local web3.\");\r\n                resolve(web3);\r\n            }\r\n        });\r\n    });\r\n\r\nexport default getWeb3;","import Seed from './contracts/Seed.json';\r\nimport ERC20 from './contracts/ERC20.json';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SeedCard = ({address, web3, account, gasPriceUrl}) => {\r\n\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [seed, setSeed] = useState();\r\n    const [token, setToken] = useState();\r\n    const [tokenName, setTokenName] = useState();\r\n    const [requiredTokens, setRequiredTokens] = useState('0');\r\n    const [isWhitelisted, setIsWhitelisted] = useState(false);\r\n    const [isFunded, setIsFunded] = useState(false);\r\n    const [balance, setBalance] = useState();\r\n    const [metadata, setMetadata] = useState();\r\n    const [admin, setAdmin] = useState();\r\n    const [name, setName] = useState();\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const [isClosed, setIsClosed] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const seed = new web3.eth.Contract(Seed.abi, address);\r\n        const getToken = async () => {\r\n            const seedToken = await seed.methods.seedToken().call();\r\n            const token = new web3.eth.Contract(ERC20.abi, seedToken);\r\n            setToken(token);\r\n            setIsLoaded(true);\r\n        };\r\n        setSeed(seed);\r\n        getToken();\r\n    },[address, web3]);\r\n\r\n    const getTokenName = async () => {\r\n        const tokenName = await token.methods.name().call();\r\n        setTokenName(tokenName);\r\n    }\r\n\r\n    const calculateRequiredSeed = async () => {\r\n        const forDistribution = await seed.methods.seedAmountRequired().call();\r\n        const forFee = await seed.methods.feeAmountRequired().call();\r\n        setRequiredTokens(((new web3.utils.BN(forDistribution)).add(new web3.utils.BN(forFee))).toString());\r\n    }\r\n    const checkIfWhiteList = async () => {\r\n        const isWhitelisted = await seed.methods.permissionedSeed().call();\r\n        setIsWhitelisted(isWhitelisted);\r\n    }\r\n    const checkIfFunded = async () => {\r\n        const isFunded = await seed.methods.isFunded().call();\r\n        setIsFunded(isFunded);\r\n    }\r\n    const checkBalance = async () => {\r\n        const balance = await token.methods.balanceOf(address).call();\r\n        setBalance(balance);\r\n    }\r\n\r\n    const getMetadata = async () => {\r\n        const hashedMetadata = await seed.methods.metadata().call();\r\n        const metadata = web3.utils.toAscii(hashedMetadata);\r\n        setMetadata(metadata);\r\n    }\r\n\r\n    const getAdmin = async () => {\r\n        setAdmin(await seed.methods.admin().call());\r\n    }\r\n\r\n    const fundSeed = async () => {\r\n        try{\r\n            const gas = await token.methods.transfer(seed.options.address, requiredTokens).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await token.methods.transfer(seed.options.address, requiredTokens).send({\r\n                from : account,\r\n                gas,\r\n                gasPrice\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    const fetchWhitelist = async (url) => {\r\n        const res = await axios.get(url);\r\n        const whitelists = (res.data).split(\",\");\r\n        return whitelists.map((account) => {\r\n            return account.replace(/\\n/g, \"\");\r\n        });\r\n    };\r\n\r\n    const parseWhiteList = async () => {\r\n        const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n        return await fetchWhitelist(JSON.parse(res.data).seedDetails.whitelist);\r\n    }\r\n    const parseName = async () => {\r\n        const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n        return JSON.parse(res.data).general.projectName;\r\n    }\r\n\r\n    const getGasPrice = async () => {\r\n        const unparsedGasPrice = (await axios.get(gasPriceUrl)).data.average/10\r\n        return web3.utils.toWei(\r\n            unparsedGasPrice.toString(),\r\n            'gwei'\r\n            );\r\n    }\r\n\r\n    const addWhitelist = async () => {\r\n        const whitelists = await parseWhiteList();\r\n        alert(`This address will be added as whitelist:- ${whitelists}`);\r\n        try{\r\n            const gas = await seed.methods.whitelistBatch(whitelists).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await seed.methods.whitelistBatch(whitelists).send({\r\n                from: account,\r\n                gas,\r\n                gasPrice \r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    const getSeedStatus = async () => {\r\n        setIsPaused(await seed.methods.paused().call());\r\n        setIsClosed(await seed.methods.closed().call());\r\n    }\r\n\r\n    const pause  = async () => {\r\n        if(!isPaused){\r\n            try{\r\n                const gas = await seed.methods.pause().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.pause().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Paused\");\r\n    }\r\n\r\n    const unpause = async () => {\r\n        if(isPaused){\r\n            try{\r\n                const gas = await seed.methods.unpause().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.unpause().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            }catch (error){\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Unpaused\");\r\n    }\r\n\r\n    const close = async () => {\r\n        if(!isClosed){\r\n            try{\r\n                const gas = await seed.methods.close().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.close().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Closed\");\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if(isLoaded){\r\n                getTokenName();\r\n                getAdmin();\r\n                calculateRequiredSeed();\r\n                checkIfWhiteList();\r\n                checkIfFunded();\r\n                checkBalance();\r\n                getSeedStatus();\r\n                getMetadata();\r\n            }\r\n        },[isLoaded]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if(metadata){\r\n                (async () => {\r\n                    setName(await parseName());\r\n                })();\r\n            }\r\n        }, [metadata]\r\n    );\r\n\r\n    return (\r\n        isLoaded?(\r\n            <div className={\"seed-card\"}>\r\n                <h4>Project Name:- {name}</h4>\r\n                <p>\r\n                    Seed:- {seed.options.address}<br />\r\n                    Admin:- {admin}<br />\r\n                    Seed Token Address:- {token.options.address}<br/>\r\n                    Seed Token Name:- {tokenName}<br />\r\n                    Required Seed Tokens:- {requiredTokens}<br/>\r\n                    Balance:- {balance}<br/>\r\n                    isFunded:- {isFunded.toString()}<br/>\r\n                    isWhitelisted:- {isWhitelisted.toString()}<br/>\r\n                    isClosed:- {isClosed.toString()}<br/>\r\n                    isPaused:- {isPaused.toString()}<br/>\r\n                </p>\r\n                <button type={'button'} onClick={getSeedStatus}>Refresh Seed Status</button>\r\n                {\r\n                    isClosed?\r\n                        null\r\n                        :\r\n                        (<>\r\n                            <button type={'button'} onClick={close}>Close Seed</button>\r\n                            {\r\n                                isPaused?\r\n                                    <button type={'button'} onClick={unpause}>Unpause Seed</button>\r\n                                    :\r\n                                    <button type={'button'} onClick={pause}>Pause Seed</button>\r\n                            }\r\n                            {\r\n                                isWhitelisted?\r\n                                    <button type={'button'} onClick={addWhitelist}>Add Whitelist</button>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                (!isFunded && balance === '0')?\r\n                                    <button type={'button'} onClick={fundSeed}>Fund Seed</button>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </>)\r\n                    }\r\n            </div>\r\n            )\r\n            :\r\n            <div>Loading...</div>\r\n    )\r\n}\r\n\r\nexport default SeedCard;","import { Component } from \"react\";\nimport contractAddresses from \"./contractAddresses.json\";\nimport SeedFactory from \"./contracts/SeedFactory.json\";\nimport getWeb3 from './getWeb3';\nimport \"./App.css\";\nimport SeedCard from \"./SeedCard\";\n\nconst gasPriceUrl = `https://ethgasstation.info/api/ethgasAPI.json?api-key=${process.env.REACT_APP_GAS_STATION_KEY}`;\n\nclass App extends Component {\n    state = {\n\t\tisLoaded: false,\n        currentAccount: \"\",\n\t\tseeds: []\n    };\n\n\tgetNetworkId = async () => {\n\t\tconst networkId = await this.web3.eth.net.getId();\n\t\treturn networkId === 5777 ? 1337 : networkId;\n\t}\n\n\tgetNetwork = async () => {\n\t\tswitch(await this.getNetworkId()){\n\t\t\tcase 1: return 'mainnet';\n\t\t\tcase 4: return 'rinkeby';\n\t\t\tdefault: return -1;\n\t\t}\n\t}\n\n    componentDidMount = async () => {\n        try {\n\t\t\tthis.web3 = await getWeb3();\n\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\n\t\t\t\talert(\"Account changed. Current Account:- \"+accounts[0]);\n                this.setState({\n                    currentAccount: accounts[0],\n                });\n            });\n\n\t\t\twindow.ethereum.on(\"chainChanged\", () => window.location.reload());\n\t\t\tconst network = await this.getNetwork();\n\t\t\tif(network === -1){\n\t\t\t\tthrow Error(\"network not supported\");\n\t\t\t}\n\t\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, contractAddresses[network].SeedFactory);\n\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnetwork: network,\n\t\t\t\t\tfactory: this.seedFactory.options.address,\n\t\t\t\t\tisLoaded: true,\n\t\t\t\t\tcurrentAccount: (await this.web3.eth.getAccounts())[0]\n\t\t\t\t}\n\t\t\t)\n\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n\t// Get all the past 'SeedCreated' events, filter the seed address and return array of seedAddress\n\tgetDeployedSeedAddress = async () => {\n\t\tconst allEvents = await this.seedFactory.getPastEvents('SeedCreated',{\n\t\t\tfromBlock: 0,\n\t\t\ttoBlock: 'latest'\n\t\t});\n\t\treturn allEvents.map(\n\t\t\tevent => event.returnValues.newSeed\n\t\t);\n\t}\n\n\t// update set with array of seed address. This will update the render\n\tloadDeployedSeeds = async () => {\n\t\tconst seeds = await this.getDeployedSeedAddress();\n\t\tthis.setState({\n\t\t\tseeds: seeds\n\t\t});\n\t}\n\n\tloadNewFactory = async (address) => {\n\t\tconsole.log(address);\n\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, address);\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tfactory: this.seedFactory.options.address\n\t\t\t}\n\t\t);\n\t}\n\n\thandleFactoryAddress = async (event) => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tnewFactoryAddress: event.target.value\n\t\t\t}\n\t\t);\n\t}\n\n\trenderDeployedSeeds = (seeds) => {\n\t\treturn seeds.map(\n\t\t\tseed => <SeedCard key={seed} address={seed} web3={this.web3} account={this.state.currentAccount} gasPriceUrl={gasPriceUrl} />\n\t\t)\n\t}\n\n    render() {\n        return (\n            this.state.isLoaded?\n\t\t\t<div className=\"App\">\n\t\t\t\t<h5>\n\t\t\t\t\tNetwork used:- {this.state.network}<br/>\n\t\t\t\t\tSeed Factory Used:- {this.state.factory}<br/>\n\t\t\t\t\tNote:- Use the Refresh button for fetching the update seed state for paused and closed.\n\t\t\t\t</h5>\n\t\t\t\t<div>\n\t\t\t\t\t<input placeholder={\"change factory address\"} value={this.state.newFactoryAddress} onChange={this.handleFactoryAddress} />\n\t\t\t\t\t<button type={\"button\"} onClick={()=>this.loadNewFactory(this.state.newFactoryAddress)}>Load New Factory</button>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.factory !== contractAddresses[this.state.network].SeedFactory?\n\t\t\t\t\t\t\t<button type={\"button\"} onClick={()=>this.loadNewFactory(contractAddresses[this.state.network].SeedFactory)}>Use Default Factory</button>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button type={\"button\"} onClick={this.loadDeployedSeeds}>Load Seeds</button>\n\t\t\t\t\t{this.renderDeployedSeeds(this.state.seeds)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t:\n\t\t\t<div>Loading</div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}